

functions:
- name
- argument names
- body

- definition
- application

*,/,+,-


<expr>  -> <sum_expr> 
<expr>  -> <div_expr> 
<expr>  -> <mul_expr> 
<expr>  -> <min_expr>
<expr> -> <number>
<number> -> {0..9}+

<sum_expr> -> + <expr> <expr>
<div_expr> -> / <expr> <expr>
<mul_expr> -> * <expr> <expr>
<min_expr> -> - <expr> <expr>

* + 1 2 7 


BNR:
<expr> ::= <number> | <sum_expr> | <div_expr> | <mul_expr>  |<min_expr> | <kPlus> | <ifExpr> | <var_set_expr> | <var_read_expr> | <block_expr> | <print_expr> | <for_expr> | <def_fn> | <call_fn> 

<sum_expr> ::= + <expr> <expr>
<div_expr> ::= / <expr> <expr>
<mul_expr> ::= * <expr> <expr>
<min_expr> ::= - <expr> <expr>

<for_expr> ::= for <var_name> from <expr> to <expr> step <expr> do <expr>
//for x from 1 to 10 step 1 do print x

<def_fn> ::= function (<var_name>)+ do <expr>  
<call_fn> ::= call <var_name> <expr>* end 

//function mul10 x do print $x



<block_expr> ::= begin <expr> .... <expr> end

<print_expr> ::= print <expr>

<var_set_expr> ::= set <var_name> <expr>
<var_read_expr> ::=  $<var_name>   

<ifExpr> ::= if <expr> then <expr> else <expr>
//+ 1 if 0 then 5 else + 1 1 --> 3
//+ 1 if 1 then 5 else + 1 1 --> 6


<kPlus> ::= k+ <number> <expr> ... <expr>
//k+ 4 2 + 1 1 2 2 = 8
//hint: vector<Expression*>

<expr> ::= <number>
<number> ::= {0..9}+

for, false

00007


+ + 1 2 * 7 + 2 3

(1 + 2) * (7 + 2)




5 + 3 *  ( 7 + 2 )


* 3 + 7 2

+ 5 * 3 + 7 2


1 + 2

+ 1 2
//създаване, инициализиране, просв. стойност, четене

